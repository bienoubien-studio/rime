/** pages ============================================== **/

export const pages = sqliteTable( 'pages', {
  id: pk(),
  home: integer('home', { mode : 'boolean' }),
  published: integer('published', { mode : 'timestamp' }),
  createdAt: integer('created_at', { mode : 'timestamp' }),
  updatedAt: integer('updated_at', { mode : 'timestamp' }),
})

export const pagesLocales = sqliteTable( 'pages_locales', {
  id: pk(),
  title: text('title').notNull(),
  slug: text('slug').notNull(),
  locale: text("locale"),
  parentId: text("parent_id").references(() => pages.id, { onDelete: 'cascade' }),
})

export const pagesBlocksParagraph = sqliteTable( 'pages_blocks_paragraph', {
  id: pk(),
  type: text('type'),
  path: text('path'),
  position: real('position'),
  parentId: text("parent_id").references(() => pages.id, { onDelete: 'cascade' }),
})

export const pagesBlocksParagraphLocales = sqliteTable( 'pages_blocks_paragraph_locales', {
  id: pk(),
  text: text('text'),
  locale: text("locale"),
  parentId: text("parent_id").references(() => pagesBlocksParagraph.id, { onDelete: 'cascade' }),
})

export const pagesRels = sqliteTable('pages_rels', {
  id: pk(),
  path: text('path'),
  position: integer('position'),
  parentId: text("parent_id").references(() => pages.id, { onDelete: 'cascade' }),
  pagesId:  text('pages_id').references(() => pages.id, { onDelete: 'cascade' }),
usersId:  text('users_id').references(() => users.id, { onDelete: 'cascade' }),

})

export const rel_pagesRels = relations(pages, ({ many }) => ({
  pages: many(pages),
users: many(users),
}))

export const rel_pagesBlocksParagraphHasOnePages = relations(pagesBlocksParagraph, ({ one }) => ({
  pages : one(pages, {
    fields: [pagesBlocksParagraph.parentId],
    references: [pages.id],
  }),
}))

export const rel_pagesLocalesHasOnePages = relations(pagesLocales, ({ one }) => ({
  pages : one(pages, {
    fields: [pagesLocales.parentId],
    references: [pages.id],
  }),
}))

export const rel_pagesRelsHasOnePages = relations(pagesRels, ({ one }) => ({
  pages : one(pages, {
    fields: [pagesRels.parentId],
    references: [pages.id],
  }),
}))

export const rel_pagesBlocksParagraphLocalesHasOnePagesBlocksParagraph = relations(pagesBlocksParagraphLocales, ({ one }) => ({
  pagesBlocksParagraph : one(pagesBlocksParagraph, {
    fields: [pagesBlocksParagraphLocales.parentId],
    references: [pagesBlocksParagraph.id],
  }),
}))

export const rel_pagesHasMany = relations(pages, ({ many }) => ({
  pagesBlocksParagraph: many(pagesBlocksParagraph),
pagesLocales: many(pagesLocales),
pagesRels: many(pagesRels),
}))

export const rel_pagesBlocksParagraphHasMany = relations(pagesBlocksParagraph, ({ many }) => ({
  pagesBlocksParagraphLocales: many(pagesBlocksParagraphLocales),
}))

/** users ============================================== **/

export const users = sqliteTable( 'users', {
  id: pk(),
  name: text('name').notNull(),
  email: text('email').unique().notNull(),
  hashedPassword: text('hashed_password').notNull(),
  roles: text('roles', { mode: 'json' }),
  website: text('website'),
  createdAt: integer('created_at', { mode : 'timestamp' }),
  updatedAt: integer('updated_at', { mode : 'timestamp' }),

  resetTokenExpireAt: integer("reset_token_expire_at", { mode: 'timestamp' }),
  resetToken: text("reset_token"),
  loginAttempts: integer("login_attempts").notNull().default(0),
  locked: integer("locked", { mode: 'boolean'}).notNull().default(false),
  lockedAt: integer("locked_at", { mode: 'timestamp'}),
  authUserId: text("auth_user_id").references(() => authSchema.authUsers.id, { onDelete: 'cascade' }).notNull(),

})

export const usersRels = sqliteTable('users_rels', {
  id: pk(),
  path: text('path'),
  position: integer('position'),
  parentId: text("parent_id").references(() => users.id, { onDelete: 'cascade' }),
  usersId:  text('users_id').references(() => users.id, { onDelete: 'cascade' }),

})

export const rel_usersRels = relations(users, ({ many }) => ({
  users: many(users),
}))

export const rel_usersRelsHasOneUsers = relations(usersRels, ({ one }) => ({
  users : one(users, {
    fields: [usersRels.parentId],
    references: [users.id],
  }),
}))

export const rel_usersHasMany = relations(users, ({ many }) => ({
  usersRels: many(usersRels),
}))

/** infos ============================================== **/

export const infos = sqliteTable( 'infos', {
  id: pk(),
  email: text('email'),
  instagram: text('instagram'),
  updatedAt: integer('updated_at', { mode : 'timestamp' }),
})

export const infosLocales = sqliteTable( 'infos_locales', {
  id: pk(),
  about: text('about'),
  legals: text('legals', { mode: 'json' }),
  locale: text("locale"),
  parentId: text("parent_id").references(() => infos.id, { onDelete: 'cascade' }),
})

export const infosRels = sqliteTable('infos_rels', {
  id: pk(),
  path: text('path'),
  position: integer('position'),
  parentId: text("parent_id").references(() => infos.id, { onDelete: 'cascade' }),
  usersId:  text('users_id').references(() => users.id, { onDelete: 'cascade' }),

})

export const rel_infosRels = relations(infos, ({ many }) => ({
  users: many(users),
}))

export const rel_infosLocalesHasOneInfos = relations(infosLocales, ({ one }) => ({
  infos : one(infos, {
    fields: [infosLocales.parentId],
    references: [infos.id],
  }),
}))

export const rel_infosRelsHasOneInfos = relations(infosRels, ({ one }) => ({
  infos : one(infos, {
    fields: [infosRels.parentId],
    references: [infos.id],
  }),
}))

export const rel_infosHasMany = relations(infos, ({ many }) => ({
  infosLocales: many(infosLocales),
infosRels: many(infosRels),
}))

/** Auth ============================================== **/

export const authUsers = sqliteTable('auth_users', {
  id: pk(),
  table: text('table').notNull(),
})

export const sessions = sqliteTable('sessions', {
  id: text('id').notNull().primaryKey(),
  userId: text('user_id')
    .notNull()
    .references(() => authUsers.id, { onDelete: 'cascade' }),
  expiresAt: integer('expires_at').notNull()
})
type GenericColumn = SQLiteColumn<
  ColumnBaseConfig<ColumnDataType, string>,
  Record<string, unknown>
>;
type GenericColumns = {
  [x: string]: GenericColumn;
};
export type GenericTable = SQLiteTableWithColumns<{
  columns: GenericColumns;
  dialect: string;
  name: string;
  schema: undefined;
}>;
type Tables = Record<string, GenericTable | SQLiteTableWithColumns<any>>;

export const tables: Tables = {
  pages,
  pagesBlocksParagraph,
  pagesLocales,
  pagesRels,
  pagesBlocksParagraphLocales,
  users,
  usersRels,
  infos,
  infosLocales,
  infosRels,
  authUsers,
  sessions
}
export const relationFieldsMap: Record<string, any> = {
  pages : {"related":{"to":"pages"},"_editedBy":{"to":"users"}},
  users : {"_editedBy":{"to":"users"}},
  infos : {"_editedBy":{"to":"users"}}
}
const schema = {
    pages,
    pagesBlocksParagraph,
    pagesLocales,
    pagesRels,
    pagesBlocksParagraphLocales,
    users,
    usersRels,
    infos,
    infosLocales,
    infosRels,
    rel_pagesBlocksParagraphHasOnePages,
    rel_pagesLocalesHasOnePages,
    rel_pagesRelsHasOnePages,
    rel_pagesHasMany,
    rel_pagesBlocksParagraphLocalesHasOnePagesBlocksParagraph,
    rel_pagesBlocksParagraphHasMany,
    rel_usersRelsHasOneUsers,
    rel_usersHasMany,
    rel_infosLocalesHasOneInfos,
    rel_infosRelsHasOneInfos,
    rel_infosHasMany,
    authUsers,
    sessions
}

export type Schema = typeof schema
export default schema
