import { access } from '$lib/access/index.js';
import {
	block,
	blocks,
	date,
	link,
	radio,
	relation,
	richText,
	slug,
	tab,
	tabs,
	text,
	toggle
} from 'rizom/config/fields/index.js';
import { ListTree, Newspaper, ReceiptText, Settings2 } from 'lucide-svelte';
import { Images, Text } from 'lucide-svelte';
import type { CollectionConfig } from 'rizom';
import type { CollectionHook } from 'rizom/types/hooks';
import type { Config } from 'rizom';
import type { GlobalConfig } from 'rizom';
import type { BlocksFieldBlockRenderTitle } from 'rizom/types/fields';
import type { PagesDoc } from '../app.generated';
import { cache } from '../plugins/cache';

/////////////////////////////////////////////
// Settings
//////////////////////////////////////////////

const Settings: GlobalConfig = {
	slug: 'settings',
	icon: Settings2,
	group: 'informations',
	fields: [
		toggle('minimalFooter').label('Minimal footer'),
		toggle('stickyHeader').label('Sticky header'),
		text('legalMention').label('Legals mentions').localized(),
		relation('logo').to('medias')
	],

	access: {
		read: (user) => access.hasRoles(user, 'admin')
	}
};

/////////////////////////////////////////////
//  Menu
//////////////////////////////////////////////

const linkField = link('link').types('pages', 'infos', 'url').required();

const renderTitle: BlocksFieldBlockRenderTitle = ({ fields, position }) => {
	const hasLink = 'link' in fields;
	const hasLabel = hasLink && 'label' in fields.link && typeof fields.link.label === 'string';
	if (!hasLabel) {
		return 'Link ' + position;
	}
	return `${fields.link.label}`;
};

const subnav = blocks('subnav')
	.label('Sub Nav')
	.blocks(
		block('subNavItem').label('Link').renderTitle(renderTitle).icon(ListTree).fields(linkField)
	);

const nav = blocks('nav').blocks(
	block('navItem').label('Link').renderTitle(renderTitle).icon(ListTree).fields(linkField, subnav)
);

const Menu: GlobalConfig = {
	slug: 'menu',
	group: 'Content',
	icon: ListTree,
	access: {
		read: () => true
	},
	fields: [nav]
};

/////////////////////////////////////////////
// Informations
//////////////////////////////////////////////

const Informations: GlobalConfig = {
	slug: 'infos',
	icon: ReceiptText,
	group: 'informations',
	fields: [
		richText('about').localized(),
		text('email'),
		text('instagram'),
		link('legals').localized()
	],
	access: {
		read: () => true
	},
	url: (doc) => {
		return `${process.env.PUBLIC_RIZOM_URL}/${doc.locale}/about`;
	},
	live: (doc) => {
		return `${process.env.PUBLIC_RIZOM_URL}/live?src=${process.env.PUBLIC_RIZOM_URL}/${doc.locale}/about&slug=infos&id=${doc.id}&locale=${doc.locale}`;
	}
};

/////////////////////////////////////////////
// Pages
//////////////////////////////////////////////

const setHome: CollectionHook<PagesDoc> = async (args) => {
	const { data, api } = args;

	if (data?.home) {
		const query = {
			where: {
				home: {
					equals: true
				}
			}
		};

		const pagesIsHome = await api.collection('pages').find<PagesDoc>({ query });

		for (const page of pagesIsHome) {
			await api.collection('pages').updateById({
				id: page.id,
				data: { home: false }
			});
		}
	}

	return args;
};

const formatslug: CollectionHook<PagesDoc> = async (args) => {
	const { data, api, operation, event } = args;

	if (operation === 'create' || operation === 'update') {
		if (data.slug) {
			const baseSlug = data.slug;
			const query = {
				where: {
					slug: {
						equals: data.slug
					}
				}
			};

			let index = 0;

			const pagesWithCurrentSlug = await api.collection('pages').find<PagesDoc>({
				query,
				locale: event?.locals.locale
			});

			while (pagesWithCurrentSlug.some((page) => page.slug === data.slug)) {
				index++;
				data.slug = `${baseSlug}-${index}`;
			}
		}

		return {
			...args,
			data
		};
	}
	return args;
};

const blockParagraph = block('paragraph')
	.icon(Text)
	.description('Simple paragraph')
	.fields(richText('text').localized());

const blockSlider = block('slider').icon(Images).description('Simple slider').fields(text('image'));
const blockImage = block('image').fields(relation('image').to('medias'), text('legend'));

const tabHero = tab('hero').fields(
	radio('heroType').options('banner', 'text').defaultValue('banner'),
	relation('image')
		.to('medias')
		.condition((doc) => {
			return doc.heroType === 'banner';
		}),
	richText('intro').marks('bold').nodes(false)
);

const tabAttributes = tab('Attributes').fields(
	text('title').isTitle().localized().required(),
	toggle('home').table({ position: 2, sort: true }).live(false),
	slug('slug')
		.slugify('title')
		.live(false)
		.table({ position: 3, sort: true })
		.localized()
		.required(),
	// combobox('template').options('page', 'page-with-booking'),

	relation('related').to('pages').many(),
	relation('author').to('users'),
	date('published')
);

const tabContent = tab('Layout').fields(
	blocks('components').blocks(blockParagraph, blockSlider, blockImage).table()
);

const tabSeo = tab('Seo').fields(
	text('metaTitle').localized(),
	text('metaDescription').localized()
);

const Pages: CollectionConfig = {
	slug: 'pages',
	icon: Newspaper,
	group: 'Content',
	fields: [tabs(tabHero, tabContent, tabAttributes, tabSeo)],
	url: (doc) => {
		return `${process.env.PUBLIC_RIZOM_URL}/${doc.locale}/${doc.slug}`;
	},
	live: (doc) => {
		return `${process.env.PUBLIC_RIZOM_URL}/live?src=${process.env.PUBLIC_RIZOM_URL}/${doc.locale}/${doc.slug}&slug=pages&id=${doc.id}&locale=${doc.locale}`;
	},
	access: {
		read: () => true,
		create: (user) => access.isAdmin(user),
		update: (user) => access.hasRoles(user, 'admin', 'editor')
	},
	hooks: {
		beforeCreate: [formatslug, setHome],
		beforeUpdate: [formatslug, setHome]
	}
};

/////////////////////////////////////////////
// Medias
//////////////////////////////////////////////

const Medias: CollectionConfig = {
	slug: 'medias',
	icon: Images,
	group: 'Medias',
	upload: true,
	imageSizes: [
		{ name: 'thumbnail', width: 400 },
		{ name: 'small', width: 720 },
		{ name: 'medium', width: 720, height: 1024 },
		{ name: 'large', width: 1080 }
	],
	panelThumbnail: 'thumbnail',
	fields: [text('alt').required()],
	access: {
		read: () => true
	}
};

const config: Config = {
	//
	siteUrl: process.env.PUBLIC_RIZOM_URL,

	collections: [Pages, Medias],
	globals: [Settings, Informations, Menu],

	localization: {
		locales: [
			{ code: 'fr', label: 'FranÃ§ais', bcp47: 'fr-FR' },
			{ code: 'en', label: 'English', bcp47: 'en-US' }
		],
		default: 'fr'
	},

	// cors: ['localhost:5173', 'local.rizom:5173'],

	smtp: {
		from: process.env.RIZOM_SMTP_USER,
		host: process.env.RIZOM_SMTP_HOST,
		port: parseInt(process.env.RIZOM_SMTP_PORT || '465'),
		auth: {
			user: process.env.RIZOM_SMTP_USER,
			password: process.env.RIZOM_SMTP_PASSWORD
		}
	},

	panel: {
		access: (user) => access.hasRoles(user, 'admin', 'editor'),
		users: {
			roles: [{ value: 'admin', label: 'Administrator' }, { value: 'editor' }],
			fields: [text('website')],
			group: 'administration',
			// TODO create an author collection for testing
			// here users shouldn't be read
			access: {
				read: () => true
			}
		}
	},

	plugins: [cache({ enabled: true })]
};

export default config;
