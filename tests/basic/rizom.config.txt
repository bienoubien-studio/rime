import {
	relation,
	richText,
	text,
	toggle,
	slug,
	tabs,
	tab,
	blocks,
	block
} from 'rizom/fields/index.js';
import { access } from '$lib/util/access/index.js';
import { Images, Newspaper, Settings2 } from '@lucide/svelte';

import type { RegisterCollection } from 'rizom';
import { collection, area, defineConfig } from 'rizom';
import type {
	CollectionHookAfterUpsert,
	CollectionHookBeforeCreate,
	CollectionHookBeforeUpsert
} from 'rizom/types/hooks';

const tabAttributes = tab('attributes').fields(
	text('title').isTitle().required(),
	toggle('isHome').label('Homepage'),
	slug('slug').slugify('title'),
	relation('parent').to('pages'),
	richText('intro')
);

const blockParagraph = block('paragraph').fields(richText('text'));
const blockImage = block('image').fields(relation('image').to('medias'));
const tabLayout = tab('layout').fields(blocks('sections', [ blockParagraph, blockImage ]));

const clearCacheHook: CollectionHookAfterUpsert<PagesDoc> = async (args) => {
	args.rizom.plugins.cache.clear();
	return args;
};

const Pages = collection('pages', {
	label: { singular: 'Page', plural: 'Pages', gender: 'f' },
	group: 'content',
	icon: Newspaper,
	fields: [tabs(tabAttributes, tabLayout)],
	url: (doc) => (doc.attributes.isHome ? '/' : `/${doc.attributes.slug}`),
	access: {
		read: () => true,
		create: (user) => access.isAdmin(user),
		update: (user) => access.hasRoles(user, 'admin', 'editor')
	},
	hooks: {
		afterUpdate: [clearCacheHook],
		afterCreate: [clearCacheHook]
	}
});

const Settings = area('settings', {
	icon: Settings2,
	group: 'informations',
	fields: [toggle('maintenance').label('Maintenance'), relation('logo').to('medias')],
	access: {
		read: (user) => access.hasRoles(user, 'admin')
	}
});

const Medias = collection('medias', {
	label: { singular: 'Media', plural: 'Medias', gender: 'm' },
	upload: true,
	icon: Images,
	group: 'content',
	fields: [text('alt').required()],
	access: {
		read: () => true
	}
});

export default defineConfig({
	database: 'basic.sqlite',
	collections: [Pages, Medias],
	areas: [Settings],
	panel: {
		users: {
			roles: [{ value: 'editor' }]
		}
	}
});
